(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{501:function(e,n,C){e.exports=C.p+"assets/img/1ffe1b74f250c9cb85205c791905f814.98b7eeb1.png"},502:function(e,n,C){e.exports=C.p+"assets/img/048b061dee709734b99e93d2dc8a0fd2.a1a5c05c.png"},811:function(e,n,C){"use strict";C.r(n);var i=C(3),v=Object(i.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("CPU Cache 的数据是从内存中读取过来的，它是以⼀⼩块⼀⼩块读取数据的，⽽不是按照单个数组元素来读取数据的，在 CPU Cache 中的，这样⼀⼩块⼀⼩块的数据，称为 "),n("strong",[e._v("Cache Line（缓存块）")]),e._v(" 。")]),e._v(" "),n("blockquote",[n("p",[e._v("Example：")]),e._v(" "),n("ul",[n("li",[e._v("内存共被划分为 32 个内存块")]),e._v(" "),n("li",[e._v("CPU Cache 共有 8 个 CPU Line，\n假设 CPU 想要访问第 15 号内存块，如果 15 号内存块中的数据已经缓存在 CPU Line 中的话，则是⼀定映射在 7 号 CPU Line 中，因为 15 % 8 的值是 7。")])])]),e._v(" "),n("p",[e._v("使用取模⽅式映射的话，就会出现多个内存块对应同⼀个 CPU Line，⽐如上面的例⼦，除了 15 号内存块是映射在 7 号 CPU Line 中，还有 7 号、 23 号、 31 号内存块都是映射到 7 号 CPULine 中\n"),n("img",{attrs:{src:C(501),alt:"1ffe1b74f250c9cb85205c791905f814.png"}})]),e._v(" "),n("p",[e._v("为了区别不同的内存块，在对应的 CPU Line 中我们还会存储⼀个组标记（Tag） 。这个组标记会记录当前 CPU Line 中存储的数据对应的内存块，我们可以⽤这个组标记来区分不同的内存块。")]),e._v(" "),n("p",[e._v("除了组标记信息外， CPU Line 还有两个信息：")]),e._v(" "),n("ul",[n("li",[e._v("从内存加载过来的实际存放数据（Data） 。")]),e._v(" "),n("li",[e._v("有效位（Valid bit） ，它是⽤来标记对应的 CPU Line 中的数据是否是有效的，如果有效位是 0，⽆论 CPU Line 中是否有数据， CPU 都会直接访问内存，重新加载数据。")])]),e._v(" "),n("p",[e._v("CPU 在从 CPU Cache 读取数据的时候，并不是读取 CPU Line 中的整个数据块，⽽是读取 CPU 所需要的⼀个数据⽚段，这样的数据统称为⼀个字（Word） 。那怎么在对应的 CPU Line 中数据块中找到所需的字呢？答案是，需要⼀个"),n("strong",[e._v("偏移量（Offset）")]),e._v(" 。")]),e._v(" "),n("p",[n("img",{attrs:{src:C(502),alt:"048b061dee709734b99e93d2dc8a0fd2.png"}})]),e._v(" "),n("p",[e._v("⼀个内存的访问地址，包括"),n("strong",[e._v("组标记、 CPU Line 索引、偏移量")]),e._v("这三种信息，于是 CPU 就能通过这些信息，在 CPU Cache 中找到缓存的数据。\nCPU Cache ⾥的数据结构，则是由"),n("strong",[e._v("索引 + 有效位 + 组标记 + 数据块")]),e._v("组成。")]),e._v(" "),n("p",[e._v("如果内存中的数据已经在 CPU Cahe 中了，那 CPU 访问⼀个内存地址的时候，会经历这 4 个步骤：")]),e._v(" "),n("ol",[n("li",[e._v("根据内存地址中索引信息，计算在 CPU Cahe 中的索引，也就是找出对应的 CPU Line 的地址；")]),e._v(" "),n("li",[e._v("找到对应 CPU Line 后，判断 CPU Line 中的有效位，确认 CPU Line 中数据是否是有效的，如果是⽆效的， CPU 就会直接访问内存，并重新加载数据，如果数据有效，则往下执⾏；")]),e._v(" "),n("li",[e._v("对⽐内存地址中组标记和 CPU Line 中的组标记，确认 CPU Line 中的数据是我们要访问的内存数据，如果不是的话， CPU 就会直接访问内存，并重新加载数据，如果是的话，则往下执⾏；")]),e._v(" "),n("li",[e._v("根据内存地址中偏移量信息，从 CPU Line 的数据块中，读取对应的字。")])])])}),[],!1,null,null,null);n.default=v.exports}}]);