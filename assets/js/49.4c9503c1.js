(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{447:function(a,e,s){a.exports=s.p+"assets/img/watermark_type_ZmFuZ3poZW5naGVpd_97e64677adca4b079.16e4f610.png"},448:function(a,e,s){a.exports=s.p+"assets/img/watermark_type_ZmFuZ3poZW5naGVpd_855e1f23245e4c828.85e50d58.png"},449:function(a,e,s){a.exports=s.p+"assets/img/watermark_type_ZmFuZ3poZW5naGVpd_3143fd3b643a46248.ebfdee5d.png"},791:function(a,e,s){"use strict";s.r(e);var r=s(3),t=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"什么是oom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是oom"}},[a._v("#")]),a._v(" 什么是OOM")]),a._v(" "),e("p",[a._v("OOM为out of memory的简称，来源于"),e("a",{attrs:{href:"https://so.csdn.net/so/search?q=java&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[a._v("java"),e("OutboundLink")],1),a._v(".lang.OutOfMemoryError，指程序需要的内存空间大于系统分配的内存空间，OOM后果就是程序crash；可以通俗理解：程序申请内存过大，虚拟机无法满足，然后自杀了。")]),a._v(" "),e("h2",{attrs:{id:"导致oom问题的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导致oom问题的原因"}},[a._v("#")]),a._v(" 导致OOM问题的原因")]),a._v(" "),e("p",[a._v("为什么会没有内存了呢？原因不外乎有两点：")]),a._v(" "),e("p",[a._v("1）分配的少了：比如虚拟机本身可使用的内存（一般通过启动时的VM参数指定）太少。")]),a._v(" "),e("p",[a._v("2）应用用的太多，并且用完没释放，浪费了。此时就会造成内存泄露或者内存溢出。")]),a._v(" "),e("p",[e("strong",[a._v("内存泄露")]),a._v("：申请使用完的内存没有释放，导致虚拟机不能再次使用该内存，此时这段内存就泄露了，因为申请者不用了，而又不能被虚拟机分配给别人用。")]),a._v(" "),e("p",[e("strong",[a._v("内存溢出")]),a._v("：申请的内存超出了JVM能提供的内存大小，此时称之为溢出。")]),a._v(" "),e("p",[a._v("最常见的OOM情况有以下三种：")]),a._v(" "),e("ul",[e("li",[a._v("java.lang.OutOfMemoryError: Java heap space ------\x3ejava堆内存溢出，此种情况最常见，一般由于内存泄露或者堆的大小设置不当引起。对于内存泄露，需要通过内存监控软件查找程序中的泄露代码，而堆大小可以通过虚拟机参数-Xms,-Xmx等修改。")]),a._v(" "),e("li",[a._v("java.lang.OutOfMemoryError: PermGen space 或 java.lang.OutOfMemoryError：MetaSpace ------\x3ejava方法区，（java8 元空间）溢出了，一般出现于大量Class或者jsp页面，或者采用cglib等反射机制的情况，因为上述情况会产生大量的Class信息存储于方法区。此种情况可以通过更改方法区的大小来解决，使用类似-XX:PermSize=64m -XX:MaxPermSize=256m的形式修改。另外，过多的常量尤其是字符串也会导致方法区溢出。")]),a._v(" "),e("li",[a._v("java.lang.StackOverflowError ------\x3e 不会抛OOM error，但也是比较常见的Java内存溢出。JAVA虚拟机栈溢出，一般是由于程序中存在死循环或者深度递归调用造成的，栈大小设置太小也会出现此种溢出。可以通过虚拟机参数-Xss来设置栈的大小。")])]),a._v(" "),e("h2",{attrs:{id:"排查手段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排查手段"}},[a._v("#")]),a._v(" 排查手段")]),a._v(" "),e("p",[a._v("一般手段是：先通过内存映像工具对Dump出来的堆转储快照进行"),e("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%88%86%E6%9E%90&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[a._v("分析"),e("OutboundLink")],1),a._v("，"),e("strong",[a._v("重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏还是内存溢出。")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。这样就能够找到泄漏的对象是通过怎么样的路径与GC Roots相关联的导致垃圾回收机制无法将其回收。掌握了泄漏对象的类信息和GC Roots引用链的信息，就可以比较准确地定位泄漏代码的位置。")])]),a._v(" "),e("li",[e("p",[a._v("如果不存在泄漏，那么就是内存中的对象确实必须存活着，那么此时就需要通过虚拟机的堆参数（ -Xmx和-Xms）来适当调大参数；从代码上检查是否存在某些对象存活时间过长、持有时间过长的情况，尝试减少运行时内存的消耗。")])])]),a._v(" "),e("h3",{attrs:{id:"实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[a._v("#")]),a._v(" 实战")]),a._v(" "),e("blockquote",[e("p",[a._v("接下来用一个简单的案例，展示OOM问题排查过程")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class OomDemo {\n    public static void main(String[] args) {\n        StringBuilder stringBuilder = new StringBuilder();\n        while(true){\n            stringBuilder.append(System.currentTimeMillis());\n        }\n    }\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("ul",[e("li",[a._v("执行代码时，通过设置JVM参数达到OOM的目的")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("java -Xmx10m -Xms10m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=oom.hprof OomDemo\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("-XX:+HeapDumpOnOutOfMemoryError和-XX:HeapDumpPath参数分别用于指定发生OOM是否要导出堆以及导出堆的文件路径")]),a._v(" "),e("p",[a._v("这个方法也可以通过jmap实时生成")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jmap -dump:format=b,file=$java_pid.hprof     #java_pid为java进程ID \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("以上命令执行后，程序会出现如下错误：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('java.lang.OutOfMemoryError: Java heap space\nDumping heap to oom.out ...\nHeap dump file created [3196858 bytes in 0.016 secs]\nException in thread "main" java.lang.OutOfMemoryError: Java heap space\n        at java.util.Arrays.copyOf(Arrays.java:3332)\n        at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)\n        at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:700)\n        at java.lang.StringBuilder.append(StringBuilder.java:214)\n        at jvm.OomDemo.main(OomDemo.java:13)\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("h2",{attrs:{id:"mat分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mat分析"}},[a._v("#")]),a._v(" MAT分析")]),a._v(" "),e("p",[a._v("首先使用MAT打开刚刚导出的hprof文件，选择报告里的泄露嫌疑分析 Leak Suspects Report")]),a._v(" "),e("img",{attrs:{width:"962",height:"823",src:s(447)}}),a._v(" "),e("p",[a._v("可以看到有一个本地变量，站了总存储的92%，实际占用的是char[]，See stacktrace，可看到该对象所在线程的堆栈信息：")]),a._v(" "),e("img",{attrs:{width:"962",height:"737",src:s(448)}}),a._v(" "),e("p",[a._v("通过这儿，可以定位到发生OOM的代码段，至此，可根据具体代码具体分析。")]),a._v(" "),e("img",{attrs:{width:"962",height:"341",src:s(449)}})])}),[],!1,null,null,null);e.default=t.exports}}]);