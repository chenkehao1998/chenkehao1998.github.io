(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{361:function(t,_,v){t.exports=v.p+"assets/img/20150507001028284_002c9aba9b3d4beeab7683dd9e0cd13d.f2c91a98.png"},362:function(t,_,v){t.exports=v.p+"assets/img/20150507001759702_b3a5a15ef78c44a59c08db55c17adef7.2d80e4eb.png"},729:function(t,_,v){"use strict";v.r(_);var s=v(3),a=Object(s.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"一、什么是拓扑排序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是拓扑排序"}},[t._v("#")]),t._v(" 一、什么是拓扑排序")]),t._v(" "),_("p",[t._v("在图论中，"),_("strong",[t._v("拓扑排序（Topological Sorting）")]),t._v(" 是一个 "),_("strong",[t._v("有向无环图（DAG, Directed Acyclic Graph")]),t._v(" 的所有顶点的线性序列。且该序列必须满足下面两个条件：")]),t._v(" "),_("ol",[_("li",[t._v("每个顶点出现且只出现一次。")]),t._v(" "),_("li",[t._v("若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。")])]),t._v(" "),_("p",[t._v("有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说。")]),t._v(" "),_("p",[t._v("例如，下面这个图：")]),t._v(" "),_("p",[_("img",{attrs:{src:v(361),alt:""}})]),t._v(" "),_("p",[t._v("它是一个 DAG 图，那么如何写出它的拓扑排序呢？这里说一种比较常用的方法：")]),t._v(" "),_("ol",[_("li",[t._v("从 DAG 图中选择一个 没有前驱（即入度为0）的顶点并输出。")]),t._v(" "),_("li",[t._v("从图中删除该顶点和所有以它为起点的有向边。")]),t._v(" "),_("li",[t._v("重复 1 和 2 直到当前的 DAG 图为空或"),_("strong",[t._v("当前图中不存在无前驱的顶点为止")]),t._v("。后一种情况说明有向图中必然存在环。")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(362),alt:""}})]),t._v(" "),_("p",[t._v("于是，得到拓扑排序后的结果是 { 1, 2, 4, 3, 5 }。")]),t._v(" "),_("p",[t._v("通常，一个有向无环图可以有"),_("strong",[t._v("一个或多个")]),t._v("拓扑排序序列。")])])}),[],!1,null,null,null);_.default=a.exports}}]);