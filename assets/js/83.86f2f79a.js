(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{417:function(a,n,s){a.exports=s.p+"assets/img/a4286082e3c248beb8521a58a242ef61_be800096a4a449d89.f3dc6d18.jpg"},757:function(a,n,s){"use strict";s.r(n);var t=s(3),l=Object(t.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("blockquote",[n("p",[a._v("本文原文地址 "),n("a",{attrs:{href:"https://www.aqwdzy.com/content/84",target:"_blank",rel:"noopener noreferrer"}},[a._v("www.aqwdzy.com"),n("OutboundLink")],1)])]),a._v(" "),n("h4",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),n("ul",[n("li",[a._v("Oracle JDK API 参考文档 https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html")]),a._v(" "),n("li",[a._v("菜鸟教程 - Java 8 Optional 类 https://www.runoob.com/java/java8-optional-class.html")])]),a._v(" "),n("h4",{attrs:{id:"拓展资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拓展资料"}},[a._v("#")]),a._v(" 拓展资料")]),a._v(" "),n("ul",[n("li",[a._v("Java8 - 函数式编程 https://blog.csdn.net/icarusliu/article/details/79495534")]),a._v(" "),n("li",[a._v("Java8 Optional 最佳实践（科学访问） https://medium.com/12-developer-labors/must-read-on-optional-type-b171e1b397bb")]),a._v(" "),n("li",[a._v("正确的使用 Java8 中的 Optional 类来消除代码中的 null 检查 https://lw900925.github.io/java/java8-optional.html")]),a._v(" "),n("li",[a._v("Java 8 中的 Optional 的优点究竟在哪里？https://www.zhihu.com/question/444199629")])]),a._v(" "),n("h2",{attrs:{id:"java8-新特性之-optional-正确理解和用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java8-新特性之-optional-正确理解和用法"}},[a._v("#")]),a._v(" Java8 新特性之 Optional 正确理解和用法")]),a._v(" "),n("h3",{attrs:{id:"一、optional-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、optional-简介"}},[a._v("#")]),a._v(" 一、Optional 简介")]),a._v(" "),n("p",[a._v("Optional 是一个容器对象，可以存储对象、字符串等值，当然也可以存储 null 值。Optional 提供很多有用的方法，能帮助我们将 Java 中的对象等一些值存入其中，这样我们就不用显式进行空值检测，使我们能够用少量的代码完成复杂的流程。")]),a._v(" "),n("p",[a._v("比如它提供了：")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("of() 方法，可以将值存入 Optional 容器中，如果存入的值是 null 则抛异常。")])]),a._v(" "),n("li",[n("p",[a._v("ofNullable() 方法，可以将值存入 Optional 容器中，即使值是 null 也不会抛异常。")])]),a._v(" "),n("li",[n("p",[a._v("get() 方法，可以获取容器中的值，如果值为 null 则抛出异常。")])]),a._v(" "),n("li",[n("p",[a._v("getElse() 方法，可以获取容器中的值，如果值为 null 则返回设置的默认值。")])]),a._v(" "),n("li",[n("p",[a._v("isPresent() 方法，该方法可以判断存入的值是否为空。")])]),a._v(" "),n("li",[n("p",[a._v("… 等等一些其它常用方法，下面会进行介绍。")])])]),a._v(" "),n("p",[a._v("可以说，使用 Optional 可以帮助我们解决业务中，减少值动不动就抛出空指针异常问题，也减少 null 值的判断，提高代码可读性等，这里我们介绍下，如果使用这个 Optional 类。 "),n("img",{attrs:{src:s(417),alt:""}})]),a._v(" "),n("h3",{attrs:{id:"二、optional-类描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、optional-类描述"}},[a._v("#")]),a._v(" 二、Optional 类描述")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("Optional 类所在包：")]),a._v(" java.util.Optional")]),a._v(" "),n("li",[n("strong",[a._v("Optional 类声明：")]),a._v(" public final class Optional extends Object")]),a._v(" "),n("li",[a._v("**Optional 类方法：")])]),a._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[a._v("方法")])]),a._v(" "),n("th",[n("strong",[a._v("修饰符&返回值类型")])]),a._v(" "),n("th",[n("strong",[a._v("介绍")])])])]),a._v(" "),n("tbody",[n("tr",[n("td",[a._v("empty()")]),a._v(" "),n("td",[a._v("static  Optional")]),a._v(" "),n("td",[a._v("创建一个空的Optional实例")])]),a._v(" "),n("tr",[n("td",[a._v("equals(Object obj)")]),a._v(" "),n("td",[a._v("boolean")]),a._v(" "),n("td",[a._v("返回是否与this相等，是对应true")])]),a._v(" "),n("tr",[n("td",[a._v("filter(Predicate<? super T> predicate)")]),a._v(" "),n("td",[a._v("Optional")]),a._v(" "),n("td",[a._v("如果存在且满足Predicate条件则返回自己，否则返回空 Optional。")])]),a._v(" "),n("tr",[n("td",[a._v("flatMap(Function<? super T,Optional> mapper)")]),a._v(" "),n("td",[a._v("Optional")]),a._v(" "),n("td",[a._v("如果值存在，返回function返回的结果，否则返回空Optional。")])]),a._v(" "),n("tr",[n("td",[a._v("get()")]),a._v(" "),n("td",[a._v("T")]),a._v(" "),n("td",[a._v("如果Optional包裹的值存在，则返回值，否则抛出NoSuchElementException异常。【尽量不要主动调用，如果非要用，还要加上try-catch，不如直接if!=null】")])]),a._v(" "),n("tr",[n("td",[a._v("hashCode()")]),a._v(" "),n("td",[a._v("int")]),a._v(" "),n("td",[a._v("如果有值就返回值的hash码，没值返回0")])]),a._v(" "),n("tr",[n("td",[a._v("ifPresent(Consumer<? super T> consumer)")]),a._v(" "),n("td",[a._v("void")]),a._v(" "),n("td",[a._v("如果有值则调用Consumer，没值啥也不干。")])]),a._v(" "),n("tr",[n("td",[a._v("isPresent()")]),a._v(" "),n("td",[a._v("boolean")]),a._v(" "),n("td",[a._v("返回值是否存在，是对应true")])]),a._v(" "),n("tr",[n("td",[a._v("map(Function<? super T,? extends U> mapper)")]),a._v(" "),n("td",[a._v("Optional")]),a._v(" "),n("td",[a._v("如果有值，则将提供的函数应用于该值，如果结果不为空，则返回包含新值的Optional")])]),a._v(" "),n("tr",[n("td",[a._v("of(T value)")]),a._v(" "),n("td",[a._v("static  Optional")]),a._v(" "),n("td",[a._v("返回带有该值的Optional【如果传入null，会抛出NullPointerException异常】")])]),a._v(" "),n("tr",[n("td",[a._v("ofNullable(T value)")]),a._v(" "),n("td",[a._v("static  Optional")]),a._v(" "),n("td",[a._v("返回带有该值的Optional，如果传入null，返回空的Optional【如果传入null，不会抛出异常】")])]),a._v(" "),n("tr",[n("td",[a._v("orElse(T other)")]),a._v(" "),n("td",[a._v("T")]),a._v(" "),n("td",[a._v("Optional中有值返回值，无值返回other")])]),a._v(" "),n("tr",[n("td",[a._v("orElseGet(Supplier<? extends T> other)")]),a._v(" "),n("td",[a._v("T")]),a._v(" "),n("td",[a._v("Optional中有值返回值，无值调用other，返回调用结果")])]),a._v(" "),n("tr",[n("td",[a._v("orElseThrow(Supplier<? extends X> exceptionSupplier)")]),a._v(" "),n("td",[a._v("T")]),a._v(" "),n("td",[a._v("Optional中有值返回值，无值抛出你传入的异常")])]),a._v(" "),n("tr",[n("td",[a._v("toString()")]),a._v(" "),n("td",[a._v("String")]),a._v(" "),n("td",[a._v("返回值的字符串形式，适用于调试")])])])]),a._v(" "),n("h3",{attrs:{id:"三、optional-常用方法及使用示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、optional-常用方法及使用示例"}},[a._v("#")]),a._v(" 三、Optional 常用方法及使用示例")]),a._v(" "),n("h4",{attrs:{id:"_1、静态方法-optional-of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、静态方法-optional-of"}},[a._v("#")]),a._v(" 1、静态方法 Optional.of()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 为指定的值创建一个指定非 null 值的 Optional。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" of 方法通过工厂方法创建 Optional 实例，需要注意的是传入的参数不能为 null，否则抛出 NullPointerException。")]),a._v(" "),n("li",[a._v("** 返回类型：**Optional")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("p",[a._v("调用两个 Optional.of() 方法，一个传入正常参数，另一个传入 null 参数：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 传入正常值，正常返回一个 Optional 对象\n    Optional<String> optional1 = Optional.of("mydlq");\n    \n    // 传入参数为 null，抛出 NullPointerException.\n    Optional optional2 = Optional.of(null);\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('Exception in thread "main" java.lang.NullPointerException\n\tat java.util.Objects.requireNonNull(Objects.java:203)\n\tat java.util.Optional.<init>(Optional.java:96)\n\tat java.util.Optional.of(Optional.java:108)\n\tat club.mydlq.OptionalExample.main(OptionalExample.java:12)\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("p",[a._v("可以看到传入正常参数正常返回 Optional 对象，传入 null 参数返回 NullPointerException 异常。")]),a._v(" "),n("h4",{attrs:{id:"_2、静态方法-optional-ofnullable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、静态方法-optional-ofnullable"}},[a._v("#")]),a._v(" 2、静态方法 Optional.ofNullable()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 为指定的值创建一个 Optional 对象，如果指定的参数为 null，不抛出异常，直接则返回一个空的 Optional 对象。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" ofNullable 方法是和 of 方式一样，都是用于创建 Optional 对象，只是传入的参数 null 时，会返回一个空的 Optional 对象，而不会抛出 NullPointerException 异常。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" Optional")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("p",[a._v("调用 Optional.ofNullable() 方法，传入 null 参数：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 传入正常值，正常返回一个 Optional 对象\n    Optional<String> optional1 = Optional.ofNullable("mydlq");\n    \n    // 传入 null 参数，正常返回 Optional 对象\n    Optional optional2 = Optional.ofNullable(null);\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("p",[a._v("运行代码，可以观察到正常传入值和传入 null 值时，都没有抛出异常。")]),a._v(" "),n("h4",{attrs:{id:"_3、对象方法-ispresent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、对象方法-ispresent"}},[a._v("#")]),a._v(" 3、对象方法 isPresent()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果值存在则方法会返回 true，否则返回 false。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" 该方法其实就是用于判断创建 Optional 时传入参数的值是否为空，实现代码就简单一行，即 "),n("code",[a._v("value != null")]),a._v(" 所以如果不为空则返回 true，否则返回 false。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" boolean")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 传入正常值，正常返回一个 Optional 对象，并使用 isPresent 方法\n    Optional optional1 = Optional.ofNullable("mydlq");\n    System.out.println("传入正常值返回：" + optional1.isPresent());\n\n    // 传入参数为 null 生成一个 Optional 对象，并使用 isPresent 方法\n    Optional optional2 = Optional.ofNullable(null);\n    System.out.println("传入 null 值返回：" + optional2.isPresent());\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("传入正常值返回：true\n传入 null 值返回：false\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("可以看到传入正常参数时调用 Optional 对象的 isPresent 方法时返回 true，传入 null 参数返回 false。")]),a._v(" "),n("h4",{attrs:{id:"_4、对象方法-get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、对象方法-get"}},[a._v("#")]),a._v(" 4、对象方法 get()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果 Optional 有值则将其返回，否则抛出 NoSuchElementException 异常。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" get 方法内部实现其实就是判断 Otpional 对象中的 value 属性是否为 null，如果是就抛出 NoSuchElementException 异常，否则返回这个 value 值。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" T")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 传入正常值，正常返回一个 Optional 对象，并使用 get 方法获取值\n    Optional optional1 = Optional.ofNullable("mydlq");\n    System.out.println(optional1.get());\n\n    // 传入参数为 null 生成一个 Optional 对象，并使用 get 方法获取值\n    Optional optional2 = Optional.ofNullable(null);\n    System.out.println(optional2.get());\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('传入正常参数：mydlq\nException in thread "main" java.util.NoSuchElementException: No value present\n\tat java.util.Optional.get(Optional.java:135)\n\tat club.mydlq.OptionalExample.main(OptionalExample.java:14)\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[a._v("BASH 可以观察到传入正常值的 Optional 调用 get 方法正常输出值，通过空的 optional 对象使用 get 方法获取值时，抛出 NoSuchElementException 异常。")]),a._v(" "),n("h4",{attrs:{id:"_5、对象方法-ifpresent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、对象方法-ifpresent"}},[a._v("#")]),a._v(" 5、对象方法 ifPresent()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果值存在则使用该值调用 consumer , 否则不做任何事情。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" 该方法 ifPresent(Consumer<? super T> consumer) 中参数接收的是 Consumer 类，它包含一个接口方法 accept()，该方法能够对传入的值进行处理，但不会返回结果。这里传入参数可以传入 Lamdda 表达式或 Consumer 对象及实现 Consumer 接口的类的对象。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" void")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 创建 Optional 对象，然后调用 Optional 对象的 ifPresent 方法，传入 Lambda 表达式\n    Optional optional1 = Optional.ofNullable("mydlq1");\n    optional1.ifPresent((value) -> System.out.println("Optional 的值为：" + value));\n\n    // 创建 Optional 对象，调用 Optional 对象的 ifPresent 方法，传入实现 Consumer 匿名内部类\n    Optional optional2 = Optional.ofNullable("mydlq2");\n    Consumer<String> consumer = new Consumer() {\n        @Override\n        public void accept(Object value) {\n            System.out.println("Optional 的值为：" + value);\n        }\n    };\n    optional2.ifPresent(consumer);\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Optional 的值为：mydlq1\nOptional 的值为：mydlq2\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("可以观察到，调用 ifPresent 使用 lambda 或者内部匿名类方法，都是为了再执行 Optional 对象的 ifPresent 方法时，执行一段代码逻辑。")]),a._v(" "),n("h4",{attrs:{id:"_6、对象方法-orelse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、对象方法-orelse"}},[a._v("#")]),a._v(" 6、对象方法 orElse()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果该值存在就直接返回， 否则返回指定的其它值。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" orElse 方法实现很简单，就是使用三目表达式对传入的参数值进行 null 验证，即 "),n("code",[a._v("value != null ? value : other;")]),a._v(" 如果为 null 则返回 true，否则返回 false。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" T")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 传入正常参数，获取一个 Optional 对象，并使用 orElse 方法设置默认值\n    Optional optional1 = Optional.ofNullable("mydlq");\n    Object object1 = optional1.orElse("默认值");\n    System.out.println("如果值不为空："+object1);\n\n    // 传入 null 参数，获取一个 Optional 对象，并使用 orElse 方法设置默认值\n    Optional optional2 = Optional.ofNullable(null);\n    Object object2 = optional2.orElse("默认值");\n    System.out.println("如果值为空："+object2);\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("如果值不为空：mydlq\n如果值为空：默认值\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("可以观察到，如果 Optional 的值为空，则返回 orElse() 方法设置的默认值，否则返回 Optional 中的值。")]),a._v(" "),n("h4",{attrs:{id:"_7、对象方法-orelseget"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、对象方法-orelseget"}},[a._v("#")]),a._v(" 7、对象方法 orElseGet()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果该值存在就返回值，否则触发 other，并返回 other 调用的结果。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" orElseGet 方法和 orElse 方法类似，都是在 Optional 值为空时，返回一个默认操作，只不过 orElse 返回的是默认值，而 orElseGet 是执行 lambda 表达式，然后返回 lambda 表达式执行后的结果。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" T")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 传入正常参数，获取一个 Optional 对象，并使用 orElse 方法设置默认值\n    Optional optional1 = Optional.ofNullable("mydlq");\n    Object object1 = optional1.orElseGet(() -> {\n        String defaultVal = "执行逻辑和生成的默认值";\n        return defaultVal;\n    });\n    System.out.println("输出的值为："+object1);\n\n    // 传入 null 参数，获取一个 Optional 对象，并使用 orElse 方法设置默认值\n    Optional optional2 = Optional.ofNullable(null);\n    Object object2 = optional2.orElseGet(() -> {\n        String defaultVal = "执行逻辑和生成的默认值";\n        return defaultVal;\n    });\n    System.out.println("输出的值为："+object2);\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("输出的值为：mydlq\n输出的值为：执行逻辑和生成的默认值\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("可也观察到，当 Optional 值为不为空时正常返回带值的 Optional，如果 Optional 为空则返回 orElseGet 方法中 lambda 表达式执行后生成的值。")]),a._v(" "),n("h4",{attrs:{id:"_8、对象方法-orelsethrow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、对象方法-orelsethrow"}},[a._v("#")]),a._v(" 8、对象方法 orElseThrow()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果 Optional 存在该值，返回包含的值，否则抛出由 Supplier 继承的异常。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" orElseThrow 方法其实就是判断创建 Optional 时传入的参数是否为 null，如果是非 null 则返回传入的值，否则抛出 异常。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" T")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 传入正常参数，获取一个 Optional 对象，并使用 orElseThrow 方法\n    try {\n        Optional optional1 = Optional.ofNullable("mydlq");\n        Object object1 = optional1.orElseThrow(() -> {\n                    System.out.println("执行逻辑，然后抛出异常");\n                    return new RuntimeException("抛出异常");\n                }\n        );\n        System.out.println("输出的值为：" + object1);\n    } catch (Throwable throwable) {\n        throwable.printStackTrace();\n    }\n    \n    // 传入 null 参数，获取一个 Optional 对象，并使用 orElseThrow 方法\n    try {\n        Optional optional2 = Optional.ofNullable(null);\n        Object object2 = optional2.orElseThrow(() -> {\n                    System.out.println("执行逻辑，然后抛出异常");\n                    return new RuntimeException("抛出异常");\n                }\n        );\n        System.out.println("输出的值为：" + object2);\n    } catch (Throwable throwable) {\n        throwable.printStackTrace();\n    }\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("值为不为空输出的值：mydlq\n执行逻辑，然后抛出异常\njava.lang.RuntimeException: 抛出异常\n\tat club.mydlq.OptionalExample.lambda$main$1(OptionalExample.java:25)\n\tat java.util.Optional.orElseThrow(Optional.java:290)\n\tat club.mydlq.OptionalExample.main(OptionalExample.java:23)\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("p",[a._v("可以观察到，当创建 Optional 时如果传入的参数为空则执行 Lambda 表达式代码逻辑后抛出异常信息，否则返回传入的参数值。")]),a._v(" "),n("h4",{attrs:{id:"_9、对象方法-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9、对象方法-map"}},[a._v("#")]),a._v(" 9、对象方法 map()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果有值，则对其执行调用映射函数得到返回值。如果返回值不为 null，则创建包含映射返回值的 Optional 作为 map 方法返回值，否则返回空 Optional。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" map 方法主要用于获取某个对象中的某个属性值的 Optional 对象时使用。map 方法调用时，首先验证传入的映射函数是否为空，如果为空则抛出异常。然后，再检测 Optional 的 value 是否为空，如果是，则返回一个空 value 的 Optional 对象。如果传入的映射函数和 Optinal 的 value 都不为空，则返回一个带 value 对象属性的 Optional 对象。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" Optional")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("p",[n("strong",[a._v("示例 1：")]),a._v(" 创建 Map 集合，存储一些键值对信息，通过 Optional 操作 Map 获取值，然后观察：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 创建 map 对象\n    Map<String, String> userMap = new HashMap<>();\n    userMap.put("name1", "mydlq");\n    userMap.put("name2", null);\n\n    // 传入 Map 对象参数，获取一个 Optional 对象，获取 name1 属性\n    Optional<String> optional1 = Optional.of(userMap).map(value -> value.get("name1"));\n\n    // 传入 Map 对象参数，获取一个 Optional 对象，获取 name2 属性\n    Optional<String> optional2 = Optional.of(userMap).map(value -> value.get("name2"));\n\n    // 获取 Optional 的值\n    System.out.println("获取的 name1 的值：" + optional1.orElse("默认值"));\n    System.out.println("获取的 name2 的值：" + optional2.orElse("默认值"));\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("获取的 Optional 的值：mydlq\n获取的 Optional 的值：默认值\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[n("strong",[a._v("示例 2：")]),a._v(" 创建一个用户类，使用 Optional 操作用户对象，获取其 name 参数，结合 Optional 的 map 方法获取值，进行观察：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class User {\n\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br")])]),n("p",[a._v("使用 Optional 的 map 方法对值处理：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 创建一个对象，设置姓名属性而不设置性别，这时候性别为 null\n    User user1 = new User("测试名称");\n    User user2 = new User();\n\n    // 使用 Optional 存储 User 对象\n    Optional<User> optional1 = Optional.ofNullable(user1);\n    Optional<User> optional2 = Optional.ofNullable(user2);\n\n    // 获取对象的 name 属性值\n    String name1 = optional1.map(User::getName).orElse("未填写");\n    String name2 = optional2.map(User::getName).orElse("未填写");\n\n    // 输出结果\n    System.out.println("获取的名称：" + name1);\n    System.out.println("获取的名称：" + name2);\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("获取的名称：测试名称\n获取的名称：未填写\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[n("strong",[a._v("总结：")])]),a._v(" "),n("p",[a._v("通过上面两个示例观察到，通过 Optional 对象的 map 方法能够获取映射对象中的属性，创建 Optional 对象，并以此属性充当 Optional 的值，结合 orElse 方法，如果获取的属性的值为空，则设置个默认值。")]),a._v(" "),n("h4",{attrs:{id:"_10、对象方法-flatmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10、对象方法-flatmap"}},[a._v("#")]),a._v(" 10、对象方法 flatMap()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果值存在，返回基于 Optional 包含的映射方法的值，否则返回一个空的 Optional。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" flatMap 方法和 map 方法类似，唯一的不同点就是 map 方法会对返回的值进行 Optional 封装，而 flatMap 不会，它需要手动执行 Optional.of 或 Optional.ofNullable 方法对 Optional 值进行封装。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" Optional")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 创建 map 对象\n    Map<String, String> userMap = new HashMap<>();\n    userMap.put("name", "mydlq");\n    userMap.put("sex", "男");\n\n    // 传入 Map 对象参数，获取一个 Optional 对象\n    Optional<Map<String, String>> optional1 = Optional.of(userMap);\n\n    // 使用 Optional 的 flatMap 方法，获取 Map 中的 name 属性\n    // 然后通过获取的值手动创建一个新的 Optional 对象\n    Optional optional2 = optional1.flatMap(value -> Optional.ofNullable(value.get("name")));\n\n    // 获取 Optional 的 value\n    System.out.println("获取的 Optional 的值：" + optional2.get());\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("获取的 Optional 的值：mydlq\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("根据结果观察，可以看到 flatMap 和 map 方法没有什么区别，但是仔细看，代码中调用 flatMap 后，需要手动执行 of 或 ofNullable 方法创建了 Optional 对象。")]),a._v(" "),n("h4",{attrs:{id:"_11、对象方法-filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11、对象方法-filter"}},[a._v("#")]),a._v(" 11、对象方法 filter()")]),a._v(" "),n("ul",[n("li",[n("strong",[a._v("方法作用：")]),a._v(" 如果有值并且满足断言条件返回包含该值的 Optional，否则返回空 Optional。")]),a._v(" "),n("li",[n("strong",[a._v("方法描述：")]),a._v(" filter 方法通过传入的限定条件对 Optional 实例的值进行过滤，如果 Optional 值不为空且满足限定条件就返回包含值的 Optional，否则返回空的 Optional。这里设置的限定条件需要使用实现了 Predicate 接口的 lambda 表达式来进行配置。")]),a._v(" "),n("li",[n("strong",[a._v("返回类型：")]),a._v(" Optional")]),a._v(" "),n("li",[n("strong",[a._v("示例代码：")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    // 创建一个测试的 Optional 对象\n    Optional<String> optional = Optional.ofNullable("mydlq");\n    // 调用 Optional 的 filter 方法，设置一个满足的条件，然后观察获取的 Optional 对象值是否为空\n    Optional optional1 =optional.filter((value) -> value.length() > 2);\n    System.out.println("Optional 的值不为空：：" + optional.isPresent());\n\n    // 调用 Optional 的 filter 方法，设置一个不满足的条件，然后观察获取的 Optional 对象值是否为空\n    Optional optional2 =optional.filter((value) -> value.length() <2);\n    System.out.println("Optional 的值不为空：：" + optional2.isPresent());\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("运行代码，可以观察到控制台输出内容如下：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Optional 的值不为空：true\nOptional 的值不为空：false\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("根据结果可以观察到，可以通过 filter 设置一个条件来判断 Optional 的值，如果满足条件就返回带值的 Optional，否则返回空的 Optional。")]),a._v(" "),n("h3",{attrs:{id:"四、optional-常用示例组合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、optional-常用示例组合"}},[a._v("#")]),a._v(" 四、Optional 常用示例组合")]),a._v(" "),n("p",[a._v("在介绍一栏中已经说过 Optional 是个容器，它可用保存类型的 T 的值，即使 T 为 null 也可以使用 Optional 存储，这样我就不用显示进行空值检测，防止空指针异常。")]),a._v(" "),n("p",[a._v("上面也介绍了 Optional 的各种方法，在实际使用中这些方法常常组合使用。且很多方法也常与 Lambda 表达式结合，获取我们想要的结果的值。")]),a._v(" "),n("p",[a._v("下面是常用的示例，可以作为参考：")]),a._v(" "),n("h4",{attrs:{id:"对集合中的对象属性进行过滤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对集合中的对象属性进行过滤"}},[a._v("#")]),a._v(" 对集合中的对象属性进行过滤")]),a._v(" "),n("p",[a._v("创建一个 User 对象实体类，里面包含 name 属性：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class User {\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br")])]),n("p",[a._v("创建一个使用 main 方法的类，创建几个 User 对象且设置不同的值，有的对象为 null 有的属性不设置，然后通过 Optional 获取 name 属性值加入集合，进行测试：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class OptionalExample {\n\n    /**\n     * 测试的 main 方法\n     */\n    public static void main(String[] args) {\n        // 创建一个测试的用户集合\n        List<User> userList = new ArrayList<>();\n\n        // 创建几个测试用户\n        User user1 = new User("abc");\n        User user2 = new User("efg");\n        User user3 = null;\n\n        // 将用户加入集合\n        userList.add(user1);\n        userList.add(user2);\n        userList.add(user3);\n\n        // 创建用于存储姓名的集合\n        List<String> nameList = new ArrayList();\n        // 循环用户列表获取用户信息，值获取不为空且用户以 a 开头的姓名，\n        // 如果不符合条件就设置默认值，最后将符合条件的用户姓名加入姓名集合\n        for (User user : userList) {\n            nameList.add(Optional.ofNullable(user).map(User::getName).filter(value -> value.startsWith("a")).orElse("未填写"));\n        }\n\n        // 输出名字集合中的值\n        System.out.println("通过 Optional 过滤的集合输出：");\n        nameList.stream().forEach(System.out::println);\n    }\n\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br")])]),n("p",[a._v("输出运行结果：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("通过 Optional 过滤的集合输出：\nabc\n未填写\n未填写\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[a._v("通过上面，可以观察到，使用 Optional 有时候可以很方便的过滤一些属性，而且它的方法可以通过链式调用，方法间相互组合使用，使我们用少量的代码就能完成复杂的逻辑。")]),a._v(" "),n("h4",{attrs:{id:"map-经典判空之嵌套-if"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-经典判空之嵌套-if"}},[a._v("#")]),a._v(" map 经典判空之嵌套 if")]),a._v(" "),n("p",[a._v("判断 map 不为空，map 中的 key-value 不为 null 且不为空白字符串，常规玩法要么是一组嵌套 if，要是是一个 tay-catch，")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public static void main(String[] args) {\n    System.out.println(test1());\n    System.out.println(test2());\n    System.out.println(test3());\n    System.out.println(test4());\n}\npublic static String test1() {\n    //假装外部传入不可控map一个，比如sevlet接受前端传参\n    Map pm = new HashMap();\n    pm.put("key1", "value1");\n\n\n    Optional<Map> mapOptional = Optional.ofNullable(pm);\n\n    return mapOptional.map(map -> map.get("key1"))\n            .filter(value -> !"".equals(value))\n            .flatMap(value -> {\n                //一大堆业务处理...\n                return Optional.ofNullable("test1成功执行");\n            }).orElse("test1停车了");\n}\n\npublic static String test2() {\n    //假装外部传入不可控map一个，比如sevlet接受前端传参\n    Map pm = new HashMap();\n    pm.put("key1", "");\n    Optional<Map> mapOptional = Optional.ofNullable(pm);\n    return mapOptional.map(map -> map.get("key1"))\n            .filter(value -> !"".equals(value))\n            .flatMap(value -> {\n                //一大堆业务处理...\n                return Optional.ofNullable("test2成功执行");\n            }).orElse("test2停车了");\n}\n\n\npublic static String test3() {\n    //假装外部传入不可控map一个，比如sevlet接受前端传参\n    Map pm = new HashMap();\n    pm.put("key1", null);\n    Optional<Map> mapOptional = Optional.ofNullable(pm);\n    return mapOptional.map(map -> map.get("key1"))\n            .filter(value -> !"".equals(value))\n            .flatMap(value -> {\n                //一大堆业务处理...\n                return Optional.ofNullable("test3成功执行");\n            }).orElse("test3停车了");\n}\npublic static String test4() {\n    //假装外部传入map一个，不传指定key\n    Map pm = new HashMap();\n\n    Optional<Map> mapOptional = Optional.ofNullable(pm);\n    return mapOptional.map(map -> map.get("key1"))\n            .filter(value -> !"".equals(value))\n            .flatMap(value -> {\n                //开始啪啪业务逻辑 发短信啊crud啊...\n                return Optional.ofNullable("test4成功执行");\n            }).orElse("test4停车了");\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br"),n("span",{staticClass:"line-number"},[a._v("46")]),n("br"),n("span",{staticClass:"line-number"},[a._v("47")]),n("br"),n("span",{staticClass:"line-number"},[a._v("48")]),n("br"),n("span",{staticClass:"line-number"},[a._v("49")]),n("br"),n("span",{staticClass:"line-number"},[a._v("50")]),n("br"),n("span",{staticClass:"line-number"},[a._v("51")]),n("br"),n("span",{staticClass:"line-number"},[a._v("52")]),n("br"),n("span",{staticClass:"line-number"},[a._v("53")]),n("br"),n("span",{staticClass:"line-number"},[a._v("54")]),n("br"),n("span",{staticClass:"line-number"},[a._v("55")]),n("br"),n("span",{staticClass:"line-number"},[a._v("56")]),n("br"),n("span",{staticClass:"line-number"},[a._v("57")]),n("br"),n("span",{staticClass:"line-number"},[a._v("58")]),n("br"),n("span",{staticClass:"line-number"},[a._v("59")]),n("br"),n("span",{staticClass:"line-number"},[a._v("60")]),n("br")])]),n("p",[a._v("输出运行结果：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("test1成功执行\ntest2停车了\ntest3停车了\ntest4停车了\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])])])}),[],!1,null,null,null);n.default=l.exports}}]);