(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{497:function(v,_,t){v.exports=t.p+"assets/img/55646bbfe12aeca577758abf6afa27d8.70b372ec.png"},498:function(v,_,t){v.exports=t.p+"assets/img/128060317520f3e2922f8aae6c224e8d.2a8fd5c6.png"},807:function(v,_,t){"use strict";t.r(_);var a=t(3),p=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("⽤了共享内存通信⽅式，带来新的问题，那就是如果多个进程同时修改同⼀个共享内存，很有可能就冲突了。例如两个进程都同时写⼀个地址，那先写的那个进程会发现内容被别⼈覆盖了。")]),v._v(" "),_("p",[v._v("为了防⽌多进程竞争共享资源，⽽造成的数据错乱，所以需要保护机制，使得共享的资源，在任意时刻只能被⼀个进程访问。正好， 信号量就实现了这⼀保护机制。")]),v._v(" "),_("p",[_("strong",[v._v("信号量其实是⼀个整型的计数器，主要用于实现进程间的互斥与同步，而不是用于缓存进程间通信的数据。")])]),v._v(" "),_("p",[v._v("信号量表示资源的数量，控制信号量的⽅式有两种原⼦操作：")]),v._v(" "),_("ul",[_("li",[v._v("⼀个是 P 操作，这个操作会把信号量减去 1，相减后如果信号量 < 0，则表明资源已被占⽤，进程需阻塞等待；相减后如果信号量 >= 0，则表明还有资源可使⽤，进程可正常继续执⾏。")]),v._v(" "),_("li",[v._v("另⼀个是 V 操作，这个操作会把信号量加上 1，相加后如果信号量 <= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运⾏；相加后如果信号量 > 0，则表明当前没有阻塞中的进程；")])]),v._v(" "),_("p",[v._v("P 操作是⽤在进⼊共享资源之前， V 操作是⽤在离开共享资源之后，这两个操作是必须成对出现的。\n接下来，举个例⼦，如果要使得两个进程互斥访问共享内存，我们可以初始化信号量为 1 。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(497),alt:"55646bbfe12aeca577758abf6afa27d8.png"}})]),v._v(" "),_("p",[v._v("具体的过程如下：")]),v._v(" "),_("ol",[_("li",[v._v("进程 A 在访问共享内存前，先执⾏了 P 操作，由于信号量的初始值为 1,故在进程 A 执⾏ P 操作后信号量变为 0，表示共享资源可⽤，于是进程 A 就可以访问共享内存。")]),v._v(" "),_("li",[v._v("若此时，进程 B 也想访问共享内存，执⾏了 P 操作，结果信号量变为了 -1，这就意味着临界资源已被占⽤，因此进程 B 被阻塞。")]),v._v(" "),_("li",[v._v("直到进程 A 访问完共享内存，才会执⾏ V 操作，使得信号量恢复为0，接着就会唤醒阻塞中的线程B，使得进程 B 可以访问共享内存，最后完成共享内存的访问后，执⾏ V 操作，使信号量恢复到初始值 1。")])]),v._v(" "),_("p",[v._v("可以发现，信号初始化为 1 ，就代表着是互斥信号量，它可以保证共享内存在任何时刻只有⼀个进程在访问，这就很好的保护了共享内存。")]),v._v(" "),_("p",[v._v("另外，在多进程⾥，每个进程并不⼀定是顺序执⾏的，它们基本是以各⾃独⽴的、不可预知的速度向前推进，但有时候我们⼜希望多个进程能密切合作，以实现⼀个共同的任务。")]),v._v(" "),_("p",[v._v("例如，进程 A 是负责⽣产数据，⽽进程 B 是负责读取数据，这两个进程是相互合作、相互依赖的，进程 A必须先⽣产了数据，进程 B 才能读取到数据，所以执⾏是有前后顺序的。")]),v._v(" "),_("p",[v._v("那么这时候，就可以⽤信号量来实现多进程同步的⽅式，我们可以初始化信号量为 0 。")]),v._v(" "),_("p",[_("img",{attrs:{src:t(498),alt:"128060317520f3e2922f8aae6c224e8d.png"}})]),v._v(" "),_("p",[v._v("具体过程：")]),v._v(" "),_("ol",[_("li",[v._v("如果进程 B ⽐进程 A 先执⾏了，那么执⾏到 P 操作时，由于信号量初始值为 0，故信号量会变为-1，表示进程 A 还没⽣产数据，于是进程 B 就阻塞等待；")]),v._v(" "),_("li",[v._v("接着，当进程 A ⽣产完数据后，执⾏了 V 操作，就会使得信号量变为 0，于是就会唤醒阻塞在 P 操作的进程 B")]),v._v(" "),_("li",[v._v("最后，进程 B 被唤醒后，意味着进程 A 已经⽣产了数据，于是进程 B 就可以正常读取数据了。\n可以发现，信号初始化为 0 ，就代表着是同步信号量，它可以保证进程 A 应在进程 B 之前执⾏。")])])])}),[],!1,null,null,null);_.default=p.exports}}]);