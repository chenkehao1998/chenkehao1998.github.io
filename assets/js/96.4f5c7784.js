(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{558:function(e,s,a){e.exports=a.p+"assets/img/bg2020042723_899f8dac8d3f4b5dbdeb440873fe4fe1.0c48d9e6.jpg"},885:function(e,s,a){"use strict";a.r(s);var t=a(3),r=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。")]),e._v(" "),s("p",[e._v("这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（"),s("code",[e._v("git merge")]),e._v("）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。")]),e._v(" "),s("p",[s("img",{attrs:{src:a(558),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"一、基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、基本用法"}},[e._v("#")]),e._v(" 一、基本用法")]),e._v(" "),s("p",[s("code",[e._v("git cherry-pick")]),e._v("命令的作用，就是将指定的提交（commit）应用于其他分支。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick <commitHash> \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("上面命令就会将指定的提交"),s("code",[e._v("commitHash")]),e._v("，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。")]),e._v(" "),s("p",[e._v("举例来说，代码仓库有"),s("code",[e._v("master")]),e._v("和"),s("code",[e._v("feature")]),e._v("两个分支。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" a - b - c - d   Master\n         \\\n           e - f - g Feature \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])])]),e._v(" "),s("p",[e._v("现在将提交"),s("code",[e._v("f")]),e._v("应用到"),s("code",[e._v("master")]),e._v("分支。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" # 切换到 master 分支 $ git checkout master\n\n# Cherry pick 操作 $ git cherry-pick f \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])])]),e._v(" "),s("p",[e._v("上面的操作完成以后，代码库就变成了下面的样子。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" a - b - c - d - f   Master\n         \\\n           e - f - g Feature \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])])]),e._v(" "),s("p",[e._v("从上面可以看到，"),s("code",[e._v("master")]),e._v("分支的末尾增加了一个提交"),s("code",[e._v("f")]),e._v("。")]),e._v(" "),s("p",[s("code",[e._v("git cherry-pick")]),e._v("命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick feature \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("上面代码表示将"),s("code",[e._v("feature")]),e._v("分支的最近一次提交，转移到当前分支。")]),e._v(" "),s("h2",{attrs:{id:"二、转移多个提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、转移多个提交"}},[e._v("#")]),e._v(" 二、转移多个提交")]),e._v(" "),s("p",[e._v("Cherry pick 支持一次转移多个提交。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick <HashA> <HashB> \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。")]),e._v(" "),s("p",[e._v("如果想要转移一系列的连续提交，可以使用下面的简便语法。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick A..B \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。")]),e._v(" "),s("p",[e._v("注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick A^..B \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("h2",{attrs:{id:"三、配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、配置项"}},[e._v("#")]),e._v(" 三、配置项")]),e._v(" "),s("p",[s("code",[e._v("git cherry-pick")]),e._v("命令的常用配置项如下。")]),e._v(" "),s("p",[s("strong",[e._v("（1）"),s("code",[e._v("-e")]),e._v("，"),s("code",[e._v("--edit")])])]),e._v(" "),s("p",[e._v("打开外部编辑器，编辑提交信息。")]),e._v(" "),s("p",[s("strong",[e._v("（2）"),s("code",[e._v("-n")]),e._v("，"),s("code",[e._v("--no-commit")])])]),e._v(" "),s("p",[e._v("只更新工作区和暂存区，不产生新的提交。")]),e._v(" "),s("p",[s("strong",[e._v("（3）"),s("code",[e._v("-x")])])]),e._v(" "),s("p",[e._v("在提交信息的末尾追加一行"),s("code",[e._v("(cherry picked from commit ...)")]),e._v("，方便以后查到这个提交是如何产生的。")]),e._v(" "),s("p",[s("strong",[e._v("（4）"),s("code",[e._v("-s")]),e._v("，"),s("code",[e._v("--signoff")])])]),e._v(" "),s("p",[e._v("在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。")]),e._v(" "),s("p",[s("strong",[e._v("（5）"),s("code",[e._v("-m parent-number")]),e._v("，"),s("code",[e._v("--mainline parent-number")])])]),e._v(" "),s("p",[e._v("如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。")]),e._v(" "),s("p",[s("code",[e._v("-m")]),e._v("配置项告诉 Git，应该采用哪个分支的变动。它的参数"),s("code",[e._v("parent-number")]),e._v("是一个从"),s("code",[e._v("1")]),e._v("开始的整数，代表原始提交的父分支编号。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick -m 1 <commitHash> \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("上面命令表示，Cherry pick 采用提交"),s("code",[e._v("commitHash")]),e._v("来自编号1的父分支的变动。")]),e._v(" "),s("p",[e._v("一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。")]),e._v(" "),s("h2",{attrs:{id:"四、代码冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、代码冲突"}},[e._v("#")]),e._v(" 四、代码冲突")]),e._v(" "),s("p",[e._v("如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。")]),e._v(" "),s("p",[s("strong",[e._v("（1）"),s("code",[e._v("--continue")])])]),e._v(" "),s("p",[e._v("用户解决代码冲突后，第一步将修改的文件重新加入暂存区（"),s("code",[e._v("git add .")]),e._v("），第二步使用下面的命令，让 Cherry pick 过程继续执行。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick --continue \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[s("strong",[e._v("（2）"),s("code",[e._v("--abort")])])]),e._v(" "),s("p",[e._v("发生代码冲突后，放弃合并，回到操作前的样子。")]),e._v(" "),s("p",[s("strong",[e._v("（3）"),s("code",[e._v("--quit")])])]),e._v(" "),s("p",[e._v("发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。")]),e._v(" "),s("h2",{attrs:{id:"五、转移到另一个代码库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、转移到另一个代码库"}},[e._v("#")]),e._v(" 五、转移到另一个代码库")]),e._v(" "),s("p",[e._v("Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git remote add target git://gitUrl \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("上面命令添加了一个远程仓库"),s("code",[e._v("target")]),e._v("。")]),e._v(" "),s("p",[e._v("然后，将远程代码抓取到本地。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git fetch target \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("上面命令将远程代码仓库抓取到本地。")]),e._v(" "),s("p",[e._v("接着，检查一下要从远程仓库转移的提交，获取它的哈希值。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git log target/master \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("p",[e._v("最后，使用"),s("code",[e._v("git cherry-pick")]),e._v("命令转移提交。")]),e._v(" "),s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" $ git cherry-pick <commitHash> \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);