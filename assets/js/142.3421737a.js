(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{764:function(n,s,t){"use strict";t.r(s);var a=t(3),e=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"thread的join-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread的join-方法"}},[n._v("#")]),n._v(" Thread的join()方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('long start = System.currentTimeMillis();\nSystem.out.println("start = " + start);\nt1.start();\ntry {\n    t.join();//注意这里\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}\nlong end = System.currentTimeMillis();\nSystem.out.println("end = " + end);\nSystem.out.println("end - Start:" + (end - start));\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("使用join()方法，join()方法的作用，是等待这个线程结束；（t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续，这里贴个说的"),s("a",{attrs:{href:"https://www.cnblogs.com/techyc/p/3286678.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("挺清楚的博客"),s("OutboundLink")],1),n._v("）")]),n._v(" "),s("h2",{attrs:{id:"countdownlatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[n._v("#")]),n._v(" CountDownLatch")]),n._v(" "),s("p",[n._v("第四种方式可以等待多个线程结束，就是使用java.util.concurrent包下的CountDownLatch类（关于CountDownLatch的用法可以参考这篇"),s("a",{attrs:{href:"https://www.cnblogs.com/will-shun/p/7392619.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("简洁的博客"),s("OutboundLink")],1),n._v("）\n简单来说，CountDownLatch类是一个计数器，可以设置初始线程数（设置后不能改变），在子线程结束时调用countDown()方法可以使线程数减一，最终为0的时候，调用CountDownLatch的成员方法wait()的线程就会取消BLOKED阻塞状态，进入RUNNABLE从而继续执行。下面上代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('int threadNumber = 1;\nfinal CountDownLatch cdl = new CountDownLatch(threadNumber);//参数为线程个数\n\nThread t = new Thread(() -> {\n    int num = 1000;\n    String s = "";\n    for (int i = 0; i < num; i++) {\n        s += "Java";\n    }\n    System.out.println("t Over");\n    cdl.countDown();//此方法是CountDownLatch的线程数-1\n});\n\nlong start = System.currentTimeMillis();\nSystem.out.println("start = " + start);\nt.start();\n//线程启动后调用countDownLatch方法\ntry {\n    cdl.await();//需要捕获异常，当其中线程数为0时这里才会继续运行\n}catch (InterruptedException e){\n    e.printStackTrace();\n}\nlong end = System.currentTimeMillis();\nSystem.out.println("end = " + end);\nSystem.out.println("end - start = " + (end - start));\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("h2",{attrs:{id:"future"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#future"}},[n._v("#")]),n._v(" Future")]),n._v(" "),s("p",[n._v("又想到刚学习了线程池，线程池的submit()的返回对象Future接口有一个get()方法也可以阻塞当前线程（其实该方法主要用途是获取子线程的返回值）")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('ExecutorService executorService = Executors.newFixedThreadPool(1);\n\nThread t = new Thread(() -> {\n    int num = 1000;\n    String s = "";\n    for (int i = 0; i < num; i++) {\n        s += "Java";\n    }\n    System.out.println("t Over");\n});\nlong start = System.currentTimeMillis();\nSystem.out.println("start = " + start);\nFuture future = executorService.submit(t);//子线程启动\ntry {\n    future.get();//需要捕获两种异常\n}catch (InterruptedException e){\n    e.printStackTrace();\n}catch (ExecutionException e){\n    e.printStackTrace();\n}\nlong end = System.currentTimeMillis();\nSystem.out.println("end = " + end);\nSystem.out.println("end - start = " + (end - start));\nexecutorService.shutdown();\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("blockquote",[s("p",[n._v("这里, ThreadPoolExecutor 是实现了 ExecutorService的方法, sumbit的过程就是把一个Runnable接口对象包装成一个 Callable接口对象, 然后放到 workQueue里等待调度执行. 当然, 执行的启动也是调用了thread的start来做到的, 只不过这里被包装掉了. 另外, 这里的thread是会被重复利用的, 所以这里要退出主线程, 需要执行以下shutdown方法以示退出使用线程池. 扯远了.\n这种方法是得益于Callable接口和Future模式, 调用future接口的get方法, 会同步等待该future执行结束, 然后获取到结果. Callbale接口的接口方法是 V call(); 是可以有返回结果的, 而Runnable的 void run(), 是没有返回结果的. 所以, 这里即使被包装成Callbale接口, future.get返回的结果也是null的.如果需要得到返回结果, 建议使用Callable接口.")]),n._v(" "),s("p",[n._v("参见"),s("a",{attrs:{href:"https://www.cnblogs.com/zhaoxinshanwei/p/5850812.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("这篇博客"),s("OutboundLink")],1)])]),n._v(" "),s("p",[s("em",[n._v("看到这个Callable突然想到之前看C#多线程的时候有说到回调的问题，因此先开个坑，下篇博文说说Java的Callable与callback问题，先贴个Callable的"),s("a",{attrs:{href:"https://www.cnblogs.com/baizhanshi/p/6425209.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("简单讲解"),s("OutboundLink")],1)])]),n._v(" "),s("hr"),n._v(" "),s("h2",{attrs:{id:"blockingqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue"}},[n._v("#")]),n._v(" BlockingQueue")]),n._v(" "),s("p",[n._v("同时，在concurrent包中，还提供了BlockingQueue（队列）来操作线程，BlockingQueue的主要的用法是在线程间安全有效的传递数据，具体用法可以参见"),s("a",{attrs:{href:"https://wsmajunfeng.iteye.com/blog/1629354",target:"_blank",rel:"noopener noreferrer"}},[n._v("这篇博客"),s("OutboundLink")],1),n._v("，对于BlockingQueue说的非常详细。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('BlockingQueue queue = new ArrayBlockingQueue(1);//数组型队列，长度为1\nThread t = new Thread(() -> {\n    int num = 1000;\n    String s = "";\n    for (int i = 0; i < num; i++) {\n        s += "Java";\n    }\n    System.out.println("t Over");\n    try {\n        queue.put("OK");//在队列中加入数据\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n});\nlong start = System.currentTimeMillis();\nSystem.out.println("start = " + start);\nt.start();\ntry {\n    queue.take();//主线程在队列中获取数据，take()方法会阻塞队列，ps还有不会阻塞的方法\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}\nlong end = System.currentTimeMillis();\nSystem.out.println("end = " + end);\nSystem.out.println("end - start = " + (end - start));\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"cyclicbarrier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[n._v("#")]),n._v(" CyclicBarrier")]),n._v(" "),s("blockquote",[s("p",[n._v("CyclicBarrier字面意思回环栅栏，通过它可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后，CyclicBarrier可以被重用。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('CyclicBarrier barrier = new CyclicBarrier(2);//参数为线程数\nThread t = new Thread(() -> {\n    int num = 1000;\n    String s = "";\n    for (int i = 0; i < num; i++) {\n        s += "Java";\n    }\n    System.out.println("t Over");\n    try {\n        barrier.await();//阻塞\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    } catch (BrokenBarrierException e) {\n        e.printStackTrace();\n    }\n});\nlong start = System.currentTimeMillis();\nSystem.out.println("start = " + start);\nt.start();\ntry {\n    barrier.await();//也阻塞,并且当阻塞数量达到指定数目时同时释放\n} catch (InterruptedException e) {\n    e.printStackTrace();\n} catch (BrokenBarrierException e) {\n    e.printStackTrace();\n}\nlong end = System.currentTimeMillis();\nSystem.out.println("end = " + end);\nSystem.out.println("end - start = " + (end - start));\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br")])]),s("p",[n._v("实际是上面这种方法是不太严谨的，因为在子线程阻塞之后如果还有代码是会继续执行的，当然本例中后面是没有代码可执行了，可以近似理解为是子线程的运行时间。")]),n._v(" "),s("p",[n._v("这里贴个"),s("a",{attrs:{href:"https://www.cnblogs.com/dolphin0520/p/3920397.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("CountDownLatch、CyclicBarrier和Semaphore"),s("OutboundLink")],1),n._v("的讲解博客")]),n._v(" "),s("hr"),n._v(" "),s("h2",{attrs:{id:"locksupport"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#locksupport"}},[n._v("#")]),n._v(" LockSupport")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('Thread mainThread = Thread.currentThread();\nThread t = new Thread(() -> {\n    //子线程进行字符串连接操作\n    int num = 1000;\n    String s = "";\n    for (int i = 0; i < num; i++) {\n        s += "Java";\n    }\n    System.out.println("t Over");\n    LockSupport.unpark(mainThread);\n});\n//开始计时\nlong start = System.currentTimeMillis();\nSystem.out.println("start = " + start);\nt.start();\nLockSupport.park();// 相当于暂停主线程\nlong end = System.currentTimeMillis();\nSystem.out.println("end = " + end);\nSystem.out.println("end - start = " + (end - start));\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("p",[n._v("简单来说就是LockSupport.unpark(mainThread)方法会给mainThread方法发一张允许执行的许可，而LockSupport.park()方法会消耗掉许可，如果没有票就阻塞当前线程。（“许可”是不能叠加的，“许可”是一次性的）")]),n._v(" "),s("hr")])}),[],!1,null,null,null);s.default=e.exports}}]);