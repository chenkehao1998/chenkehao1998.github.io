(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{517:function(t,a,e){t.exports=e.p+"assets/img/983950-20210609151118491-2114026_08113b71226f481b8.7bc57abb.png"},518:function(t,a,e){t.exports=e.p+"assets/img/983950-20210609171852894-2025598_0c1ec5f93900468cb.625b9f03.png"},519:function(t,a,e){t.exports=e.p+"assets/img/983950-20200710170402633-1646506_bd35deeb6e4d424d8.efd87cbc.png"},520:function(t,a,e){t.exports=e.p+"assets/img/983950-20210609172809653-2048975_2575ab870ba949fab.c5ff5b24.png"},521:function(t,a,e){t.exports=e.p+"assets/img/983950-20210609173059679-4168328_2df4d5fc961b48e09.2389c11d.png"},522:function(t,a,e){t.exports=e.p+"assets/img/sig2_de22be8c84e74a2ca035fd30f2e86f3b.2f01f181.png"},817:function(t,a,e){"use strict";e.r(a);var s=e(3),_=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"一、概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[t._v("#")]),t._v(" 一、概述")]),t._v(" "),a("h2",{attrs:{id:"_1、理解http的无状态特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、理解http的无状态特性"}},[t._v("#")]),t._v(" 1、理解Http的无状态特性")]),t._v(" "),a("p",[t._v("HTTP是一个无状态的协议，WEB服务器在处理所有传入HTTP请求时，根本就不知道某个请求是否是一个用户的第一次请求与后续请求，或者是另一个用户的请求。 WEB服务器每次在处理请求时，都会按照用户所访问的资源所对应的处理代码，从头到尾执行一遍，然后输出响应内容，WEB服务器根本不会记住已处理了哪些用户的请求，因此，我们通常说HTTP协议是无状态的。")]),t._v(" "),a("h2",{attrs:{id:"_2、为什么需要认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、为什么需要认证"}},[t._v("#")]),t._v(" 2、为什么需要认证")]),t._v(" "),a("p",[t._v("虽然HTTP协议与WEB服务器是无状态，但我们的业务需求却要求有状态，典型的就是用户登录， 在这种业务需求中，要求WEB服务器端能区分某个请求是不是一个已登录用户发起的，或者当前请求是哪个用户发出的。 在开发WEB应用程序时，我们通常会使用Cookie来保存一些简单的数据供服务端维持必要的状态。总的来说，加入认证的根本原因就是确保请求的合法性以及资源的安全性，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:e(517),alt:""}})]),t._v(" "),a("h1",{attrs:{id:"二、http-bearer认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、http-bearer认证"}},[t._v("#")]),t._v(" 二、HTTP Bearer认证")]),t._v(" "),a("p",[t._v("http认证根据凭证协议的不同，划分为不同的方式。常用的方式有：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP基本认证")]),t._v(" "),a("li",[t._v("HTTP摘要认证")]),t._v(" "),a("li",[t._v("HTTP Bearer认证")])]),t._v(" "),a("p",[t._v("本篇文章介绍HTTP Bearer认证。")]),t._v(" "),a("h2",{attrs:{id:"_1、原理解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、原理解析"}},[t._v("#")]),t._v(" 1、原理解析")]),t._v(" "),a("p",[t._v("下面通过图详细的了解下HTTP Bearer认证过程：")]),t._v(" "),a("p",[a("img",{attrs:{src:e(518),alt:""}})]),t._v(" "),a("p",[t._v("Bearer认证也是http协议中的标准认证方式，在Bearer认证中的凭证称为Bearer_token 或者Access_token。该种方式的优点就是灵活方便，因为凭证的生成和验证完全由开发人员设计和实现。一般凭证的设计尽量能保证以下几点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用户信息安全性，即保证重要信息不被泄露和恶意破解")])]),t._v(" "),a("li",[a("p",[t._v("避免重放攻击")])]),t._v(" "),a("li",[a("p",[t._v("更方便的适应更多的应用场景，主要体现在在服务端不需要凭证状态保存，分布式场景中，不需要状态共享")])]),t._v(" "),a("li",[a("p",[t._v("少查库，减少服务端负担。")])])]),t._v(" "),a("p",[t._v("目前最流行的token编码协议就是JWT(JSON WEB TOKEN)，下面通过jwt协议说明。")]),t._v(" "),a("h2",{attrs:{id:"_2-jwt协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jwt协议"}},[t._v("#")]),t._v(" 2. JWT协议")]),t._v(" "),a("h3",{attrs:{id:"_2-1-什么是jwt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是jwt"}},[t._v("#")]),t._v(" 2.1 什么是JWT")]),t._v(" "),a("p",[t._v("Json web token (JWT)，是一种基于JSON的开放标准（"),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"}},[t._v("(RFC 7519"),a("OutboundLink")],1),t._v(")。")]),t._v(" "),a("h3",{attrs:{id:"_2-2jwt协议优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2jwt协议优缺点"}},[t._v("#")]),t._v(" 2.2JWT协议优缺点")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("p",[t._v("1、可以避免用户信息泄露。")]),t._v(" "),a("p",[t._v("2、payload中可以携带一些必要的非敏感信息，比如用户名、用户邮箱，供前端使用")]),t._v(" "),a("p",[t._v("3、服务端不用存放jwt的状态信息，减轻服务端压力,在分布式场景中更方便，不需要状态共享")]),t._v(" "),a("p",[t._v("4、通过时间戳的方式避免重放攻击，token的时效性尽量短")]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("p",[t._v("1、可以使用jwt 提供的jti，即jwt的id，来避免重放攻击，但是jti的值需要存储，不管是存储在redis还是mysql，都是要损耗性能的。")]),t._v(" "),a("h2",{attrs:{id:"_3-jwt组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-jwt组成"}},[t._v("#")]),t._v(" 3. JWT组成")]),t._v(" "),a("p",[a("img",{attrs:{src:e(519),alt:""}})]),t._v(" "),a("p",[t._v("JWT是由三段信息构成的，将这三段信息文本连接起来就构成了Jwt字符串。第一部分我们称它为头部（header)，第二部分我们称其为载荷（payload)，第三部分是签证（signature)，下面是个JWT实例：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiJBZG1pbiIsIkV4cGlyZSI6IjIwMjAtMDctMTEgMTY6NDc6MTYifQ.9ev6IGc1K3xvYaEfmMYeyFz5oHCM57fRGOvSZ-jvArw\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"_1-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-header"}},[t._v("#")]),t._v(" （1）Header")]),t._v(" "),a("p",[a("img",{attrs:{src:e(520),alt:""}})]),t._v(" "),a("p",[t._v("在这里，我们说明了这是一个JWT，并且我们所用的签名算法是HS256算法。对它也要进行Base64编码，之后的字符串就成了JWT的"),a("strong",[t._v("Header")]),t._v("（头部）:")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-payload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-payload"}},[t._v("#")]),t._v(" （2）Payload")]),t._v(" "),a("p",[a("img",{attrs:{src:e(521),alt:""}})]),t._v(" "),a("p",[t._v("将上面的JSON对象进行[base64编码]可以得到下面的字符串。这个字符串我们将它称作JWT的Payload（载荷）：")]),t._v(" "),a("p",[t._v("eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9")]),t._v(" "),a("h3",{attrs:{id:"_3-signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-signature"}},[t._v("#")]),t._v(" （3）signature")]),t._v(" "),a("p",[t._v("jwt的第三部分是一个签证信息，这个签证信息由三部分组成：")]),t._v(" "),a("ul",[a("li",[t._v("header (base64后的)")]),t._v(" "),a("li",[t._v("payload (base64后的)")]),t._v(" "),a("li",[t._v("secret")])]),t._v(" "),a("p",[t._v("这个部分需要base64加密后的header和base64加密后的payload使用"),a("code",[t._v(".")]),t._v("连接组成的字符串，然后通过header中声明的加密方式进行"),a("code",[t._v("secret")]),t._v("组合加密，然后就构成了jwt的第三部分。")]),t._v(" "),a("p",[t._v("var encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\nvar signature = HMACSHA256(encodedString, 'secret'); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ")]),t._v(" "),a("p",[t._v("将这三部分用"),a("code",[t._v(".")]),t._v("连接成一个完整的字符串,构成了最终的jwt:")]),t._v(" "),a("p",[t._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ")]),t._v(" "),a("p",[t._v("注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。")]),t._v(" "),a("h2",{attrs:{id:"_4、jwt签名的目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、jwt签名的目的"}},[t._v("#")]),t._v(" 4、JWT签名的目的")]),t._v(" "),a("p",[t._v("最后一步签名的过程，实际上是对头部以及载荷内容进行签名。一般而言，加密算法对于不同的输入产生的输出总是不一样的。所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(522),alt:"",title:"签名过程"}})]),t._v(" "),a("p",[t._v("服务器应用在接受到JWT后，会首先对头部和载荷的内容用同一算法再次签名。那么服务器应用是怎么知道我们用的是哪一种算法呢？别忘了，我们在JWT的头部中已经用"),a("code",[t._v("alg")]),t._v("字段指明了我们的加密算法了。如果服务器应用对头部和载荷再次以同样方法签名之后发现，自己计算出来的签名和接受到的签名不一样，那么就说明这个Token的内容被别人动过的，我们应该拒绝这个Token，返回一个HTTP 401 Unauthorized响应。")]),t._v(" "),a("h2",{attrs:{id:"_5-jwt安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-jwt安全性"}},[t._v("#")]),t._v(" 5. JWT安全性")]),t._v(" "),a("p",[t._v("使用JWT会暴露信息吗？是的。所以，在JWT中，不应该在载荷里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。总结如下：")]),t._v(" "),a("ul",[a("li",[t._v("不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。")]),t._v(" "),a("li",[t._v("保护好secret私钥，该私钥非常重要。")]),t._v(" "),a("li",[t._v("如果可以，请使用https协议")])]),t._v(" "),a("h2",{attrs:{id:"_6-jwt的适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-jwt的适用场景"}},[t._v("#")]),t._v(" 6. JWT的适用场景")]),t._v(" "),a("p",[t._v("JWT适合用于向Web应用传递一些非敏感信息。其实JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。")])])}),[],!1,null,null,null);a.default=_.exports}}]);