(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{699:function(a,t,s){a.exports=s.p+"assets/img/03b65349cab2e41a516c01b2056284c2.eec6b5db.png"},700:function(a,t,s){a.exports=s.p+"assets/img/a1fa28fe6a74c62aad2af619e879a878.02b6729c.png"},701:function(a,t,s){a.exports=s.p+"assets/img/1485b62e8845bacf50e10e645c24044d.97d44dbb.png"},702:function(a,t,s){a.exports=s.p+"assets/img/ea9a66f0023f3b468d4a90fad27c2e88.508d726d.png"},991:function(a,t,s){"use strict";s.r(t);var e=s(3),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_1-产生原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-产生原因"}},[a._v("#")]),a._v(" 1. 产生原因")]),a._v(" "),t("p",[a._v("在消息队列中，一个queue中的数据，一次只会被一个消费者消费掉\n"),t("img",{attrs:{src:s(699),alt:"03b65349cab2e41a516c01b2056284c2.png"}}),a._v("\n但因为不同消费者的执行速度不一致，在存入数据库后，造成顺序不一致的问题\n"),t("img",{attrs:{src:s(700),alt:"a1fa28fe6a74c62aad2af619e879a878.png"}})]),a._v(" "),t("h1",{attrs:{id:"_2-解决办法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决办法"}},[a._v("#")]),a._v(" 2. 解决办法")]),a._v(" "),t("ol",[t("li",[a._v("rabbitmq\n"),t("img",{attrs:{src:s(701),alt:"1485b62e8845bacf50e10e645c24044d.png"}})]),a._v(" "),t("li",[a._v("kafka\n"),t("img",{attrs:{src:s(702),alt:"ea9a66f0023f3b468d4a90fad27c2e88.png"}})])])])}),[],!1,null,null,null);t.default=n.exports}}]);