(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{984:function(t,n,s){"use strict";s.r(n);var o=s(3),e=Object(o.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p",[this._v("幂等性：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等。\n"),t("RouterLink",{attrs:{to:"/消息队列/那么如何设计接口才能做到幂等呢？.html"}},[this._v("那么如何设计接口才能做到幂等呢？")])],1)])}),[],!1,null,null,null);n.default=e.exports}}]);