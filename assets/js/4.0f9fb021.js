(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{363:function(t,s,a){t.exports=a.p+"assets/img/format_png_bdc5570c8cd34af8b7b775333a165de9.1877ad64.png"},364:function(t,s,a){t.exports=a.p+"assets/img/format_png_df0835ba068741f2902cbe20ed4d6792.52040f9b.png"},365:function(t,s,a){t.exports=a.p+"assets/img/format_png_f3aefeda061a4bb99f810a30626adff6.81ef5e59.png"},366:function(t,s,a){t.exports=a.p+"assets/img/20150818212028853_8126c532b90f489b8dc4415fa78dbf9c.f0850165.png"},367:function(t,s,a){t.exports=a.p+"assets/img/20150818221513880_08c38bf5c4b74a5886d08590543c99dc.07c042a9.png"},368:function(t,s,a){t.exports=a.p+"assets/img/20180816194335560_22a82072b9b041399e91551dd6b802b8.f3cde927.png"},369:function(t,s,a){t.exports=a.p+"assets/img/20150818215441436_4ff77f67219c489f8f2a2ddd9b273798.cde8c89a.png"},370:function(t,s,a){t.exports=a.p+"assets/img/20150818220942825_50f0c14f7ba7459aaa41e409df1c3215.b7296c46.png"},371:function(t,s,a){t.exports=a.p+"assets/img/20180816194715558_30ce532a2944489885521703dd8249f3.aaa7cefd.png"},372:function(t,s,a){t.exports=a.p+"assets/img/20150818222514855_c9d2a3c826704ee0b0c36c6a275a259f.9218a35b.png"},373:function(t,s,a){t.exports=a.p+"assets/img/20150818224419149_e9d0d88cebf94473893e2fae9630692d.8c536c86.png"},374:function(t,s,a){t.exports=a.p+"assets/img/20180816195733482_fd6bcd8227424a678f53e5619abb4e7a.8f33f1a9.png"},375:function(t,s,a){t.exports=a.p+"assets/img/20150818224940731_5b2679bc0434415b87a21d638a37c129.94f5ceee.png"},376:function(t,s,a){t.exports=a.p+"assets/img/20150818230041580_aabeb01e202d48e29e7eee37be751fc9.8b6c402d.png"},377:function(t,s,a){t.exports=a.p+"assets/img/20180816200720830_d153ecbe06354412aaa1ba546bf1b616.305548f5.png"},730:function(t,s,a){"use strict";a.r(s);var e=a(3),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"一、avl树简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、avl树简介"}},[t._v("#")]),t._v(" 一、AVL树简介")]),t._v(" "),s("blockquote",[s("p",[t._v("AVL树的名字来源于它的发明作者G.M. "),s("strong",[t._v("A")]),t._v("delson-"),s("strong",[t._v("V")]),t._v("elsky 和 E.M. "),s("strong",[t._v("L")]),t._v("andis。AVL树是最先发明的自平衡"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉查找树"),s("OutboundLink")],1),t._v("（Self-Balancing Binary Search Tree,简称平衡二叉树）。")]),t._v(" "),s("p",[s("strong",[t._v("平衡二叉树定义(AVL)")]),t._v("：它或者是一颗空树，或者具有以下性质的"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉排序树"),s("OutboundLink")],1),t._v("：它的左子树和右子树的深度之差(平衡因子)的绝对值不超过1，且它的左子树和右子树都是一颗平衡二叉树。")])]),t._v(" "),s("p",[t._v("一棵AVL树有如下必要条件：")]),t._v(" "),s("ol",[s("li",[t._v("条件一：它必须是二叉查找树。")]),t._v(" "),s("li",[t._v("条件二：每个节点的左子树和右子树的高度差至多为1。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(363),alt:""}})]),t._v(" "),s("p",[t._v("图一中左边二叉树的节点45的左孩子46比45大，不满足二叉搜索树的条件，因此它也不是一棵"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("平衡二叉树"),s("OutboundLink")],1),t._v("。\n右边二叉树满足二叉搜索树的条件，同时它满足条件二，因此它是一棵平衡二叉树。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(364),alt:""}})]),t._v(" "),s("p",[t._v("左边二叉树的节点45左子树高度2，右子树高度0，左右子树高度差为2-0=2，不满足条件二；\n右边二叉树的节点均满足左右子树高度差至多为1，同时它满足二叉搜索树的要求，因此它是一棵平衡二叉树。")]),t._v(" "),s("p",[t._v("AVL树的查找、插入、删除操作在平均和最坏的情况下都是O（logn），这得益于它时刻维护着二叉树的平衡。如果我们需要查找的集合本身没有顺序，在频繁查找的同时也经常的插入和删除，AVL树是不错的选择。不平衡的二叉查找树在查找时的效率是很低的，因此，"),s("strong",[t._v("AVL如何维护二叉树的平衡")]),t._v("是我们的学习重点。")]),t._v(" "),s("h1",{attrs:{id:"二、avl树相关概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、avl树相关概念"}},[t._v("#")]),t._v(" 二、AVL树相关概念")]),t._v(" "),s("p",[t._v("1. "),s("strong",[t._v("平衡因子")]),t._v("：将二叉树上节点的左子树高度减去右子树高度的值称为该节点的平衡因子BF(Balance Factor)。\n    在图二右边的AVL树上：\n    节点50的左子树高度为3，右子树高度为2，BF= 3-2 = 1；\n    节点45的左子树高度为2，右子树高度为1，BF= 2-1 = 1；\n    节点46的左子树高度为0，右子树高度为0，BF= 0-0 = 0；\n    节点65的左子树高度为0，右子树高度为1，BF= 0-1 = -1；\n    对于平衡二叉树，BF的取值范围为[-1,1]。如果发现某个节点的BF值不在此范围，则需要对树进行调整。")]),t._v(" "),s("p",[t._v("2. "),s("strong",[t._v("最小不平衡子树")]),t._v("：距离插入节点最近的，且平衡因子的绝对值大于1的节点为根的子树.。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(365),alt:""}})]),t._v(" "),s("p",[t._v("在图三中，左边二叉树的节点45的BF = 1，插入节点43后，节点45的BF = 2。节点45是距离插入点43最近的BF不在[-1,1]范围内的节点，因此以节点45为根的子树为最小不平衡子树。")]),t._v(" "),s("h1",{attrs:{id:"三、avl树的平衡调整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、avl树的平衡调整"}},[t._v("#")]),t._v(" 三、AVL树的平衡调整")]),t._v(" "),s("p",[t._v("定义平衡二叉树节点结构：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("typedef struct Node{\n\tint key;\n\tstruct Node *left;\n\tstruct Node *right;\n\tint height;\n}BTNode;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("整个实现过程是通过在一棵平衡二叉树中依次插入元素(按照二叉排序树的方式)，若出现不平衡，则要根据新插入的结点与最低不平衡结点的位置关系进行相应的调整。分为LL型、RR型、LR型和RL型4种类型，各调整方法如下(下面用A表示最低不平衡结点)：")]),t._v(" "),s("h2",{attrs:{id:"_1-ll型调整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-ll型调整"}},[t._v("#")]),t._v(" 1. LL型调整：")]),t._v(" "),s("blockquote",[s("p",[t._v("由于在A的左孩子(L)的左子树(L)上插入新结点，使原来平衡二叉树变得不平衡，此时A的平衡因子由1增至2。下面图1是LL型的最简单形式。显然，按照大小关系，结点B应作为新的根结点，其余两个节点分别作为左右孩子节点才能平衡，A结点就好像是绕结点B顺时针旋转一样。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(366),alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("LL型调整的一般形式如下图2所示，表示在A的左孩子B的左子树BL(不一定为空)中插入结点(图中阴影部分所示)而导致不平衡( h 表示子树的"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度"),s("OutboundLink")],1),t._v(")。这种情况调整如下："),s("strong",[t._v("①将A的左孩子B提升为新的根结点；②将原来的根结点A降为B的右孩子；③各子树按大小关系连接(BL和AR不变，BR调整为A的左子树)。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(367),alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(368),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_2-rr型调整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-rr型调整"}},[t._v("#")]),t._v(" 2. RR型调整：")]),t._v(" "),s("blockquote",[s("p",[t._v("由于在A的右孩子(R)的右子树(R)上插入新结点，使原来平衡二叉树变得不平衡，此时A的平衡因子由-1变为-2。图3是RR型的最简单形式。显然，按照大小关系，结点B应作为新的根结点，其余两个节点分别作为左右孩子节点才能平衡，A结点就好像是绕结点B逆时针旋转一样。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(369),alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("RR型调整的一般形式如下图4所示，表示在A的右孩子B的右子树BR(不一定为空)中插入结点(图中阴影部分所示)而导致不平衡( h 表示子树的深度)。这种情况调整如下：")]),t._v(" "),s("ul",[s("li",[t._v("将A的右孩子B提升为新的根结点；")]),t._v(" "),s("li",[t._v("将原来的根结点A降为B的左孩子")]),t._v(" "),s("li",[t._v("各子树按大小关系连接(AL和BR不变，BL调整为A的右子树)。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(370),alt:""}})]),t._v(" "),s("p"),t._v(" "),s("p",[s("img",{attrs:{src:a(371),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_3-lr型调整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-lr型调整"}},[t._v("#")]),t._v(" 3. LR型调整")]),t._v(" "),s("blockquote",[s("p",[t._v("由于在A的左孩子(L)的右子树(R)上插入新结点，使原来平衡二叉树变得不平衡，此时A的平衡因子由1变为2。图5是LR型的最简单形式。显然，按照大小关系，结点C应作为新的根结点，其余两个节点分别作为左右孩子节点才能平衡。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(372),alt:""}})]),t._v(" "),s("p"),t._v(" "),s("blockquote",[s("p",[t._v("LR型调整的一般形式如下图6所示，表示在A的左孩子B的右子树(根结点为C，不一定为空)中插入结点(图中两个阴影部分之一)而导致不平衡( h 表示子树的深度)。这种情况调整如下："),s("strong",[t._v("①将B的左孩子C提升为新的根结点；②将原来的根结点A降为C的右孩子；③各子树按大小关系连接(BL和AR不变，CL和CR分别调整为B的右子树和A的左子树)。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(373),alt:""}})]),t._v(" "),s("p"),t._v(" "),s("p",[s("img",{attrs:{src:a(374),alt:""}})]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_4-rl型调整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-rl型调整"}},[t._v("#")]),t._v(" 4. RL型调整：")]),t._v(" "),s("ul",[s("li",[t._v("由于在A的右孩子(R)的左子树(L)上插入新结点，使原来平衡二叉树变得不平衡，此时A的平衡因子由-1变为-2。图7是RL型的最简单形式。显然，按照大小关系，结点C应作为新的根结点，其余两个节点分别作为左右孩子节点才能平衡。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(375),alt:""}})]),t._v(" "),s("p"),t._v(" "),s("ul",[s("li",[t._v("RL型调整的一般形式如下图8所示，表示在A的右孩子B的左子树(根结点为C，不一定为空)中插入结点(图中两个阴影部分之一)而导致不平衡( h 表示子树的深度)。这种情况调整如下："),s("strong",[t._v("①将B的左孩子C提升为新的根结点；②将原来的根结点A降为C的左孩子；③各子树按大小关系连接(AL和BR不变，CL和CR分别调整为A的右子树和B的左子树)。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(376),alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(377),alt:""}})])])}),[],!1,null,null,null);s.default=r.exports}}]);